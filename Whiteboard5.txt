Question #5: Array Sorting

Write an algorithm that sorts an array without using the sort() method. 
There are many different sorting algorithms - take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem - as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]
Output: [2, 7, 9, 12]

Input: ["a", "b", "z", "c"];
Output: [ "a", "b", "c", "z"]

Clarifying questions: 
I understand that I am not able to solve using the sort() method, however may I use built-in methods if I need to? 
Am I allowed to solve this in JavaScript? And if I get stuck or forget the exact syntax for something, may I use
psuedocode? 
If I understand correctly, I want my algorithm to take an array, sort it in ascending order, and return it back as 
an array. Is that correct? 

Edge cases:
Based on the example input/output I know I can at least expect one array. Can I expect to always receive a single array? Or can 
I expect some variation on that? Like nested arrays?
Is there a possibility that I could receive an empty array? Would an empty array be considered sorted?
Will I be receiving an array of only numbers? If so, will those numbers be integers/negative/etc.?

Plan:
Attempt at selection sort. This algorithm divides the input array into two sublists - a sorted 
and unsorted sublist. The sorted list is located at the start of the collection, and all elements to the right 
of the final sorted element are considered unsorted. 
First, I'm going to set up a for loop to iterate through the inputted array. 
Set a variable min = i; this will hold the index of the current smallest element.
Now I'm going to loop through the array again - I'll be initializing my second for loop at the index + 1
Add an if statement to check if the index of j is less than the current value of min. if it is, then I set
min equal to j. 
So I'm evaluating if arr[j] < arr[min]. If it is, this means that j should be swapped to the end of our sorted section 
(unless an even lower value is found.) I do this by setting min = j
After this loop completes, we will have found the next lowest value in the unsorted section of the array, and will swap it into its 
proper place using ES6 [a, b] = [b, a] syntax.

Solution

function sortArr(arr) {
  for (let i = 0; i < arr.length; i++) {
    let min = i;
    for (let j = i + 1; j <arr.length; j++) {
      if (arr[j] < arr[min]) {
        min = j;
      }
    }
    [arr[i], arr[min]] = [arr[min], arr[i]];
   }
   return arr;
}
